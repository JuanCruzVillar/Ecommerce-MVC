@model eCommerce.Entities.CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    Layout = "_Layout";
}


@{
    var cantidadMetodos = Model.MetodosPagoDisponibles?.Count ?? 0;
    var cantidadDirecciones = Model.DireccionesDisponibles?.Count ?? 0;
    Console.WriteLine($"DEBUG VIEW - Métodos de pago: {cantidadMetodos}");
    Console.WriteLine($"DEBUG VIEW - Direcciones: {cantidadDirecciones}");
}

@if (cantidadMetodos == 0)
{
    <div class="alert alert-danger">
        <strong>ERROR:</strong> No se cargaron métodos de pago. Verificar base de datos y servicio.
    </div>
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4 border-0">
                <div class="card-header text-white" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <h4 class="mb-0">
                        <i class="fas fa-shopping-cart me-2"></i>
                        Finalizar Compra
                    </h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("ProcesarPedido", "Checkout", FormMethod.Post, new { @class = "checkout-form" }))
                    {
                        @Html.AntiForgeryToken()

                        @* 1. Dirección de Envío *@
                        <div class="checkout-step mb-4">
                            <h5 class="step-title">
                                <span class="step-number">1</span>
                                Dirección de Envío
                            </h5>

                            <div class="step-content">
                                @if (Model.DireccionesDisponibles.Any())
                                {
                                    <div class="direcciones-existentes mb-3">
                                        <h6>Seleccionar dirección guardada:</h6>
                                        @foreach (var direccion in Model.DireccionesDisponibles)
                                        {
                                            <div class="form-check direccion-card mb-2">
                                                @Html.RadioButtonFor(m => m.DireccionEnvioSeleccionada, direccion.IdDireccionEnvio, new { @class = "form-check-input direccion-radio", id = $"direccion_{direccion.IdDireccionEnvio}" })
                                                <label class="form-check-label w-100" for="direccion_@direccion.IdDireccionEnvio">
                                                    <div class="card direccion-option">
                                                        <div class="card-body p-3">
                                                            <div class="d-flex justify-content-between align-items-start">
                                                                <div>
                                                                    <strong>@direccion.NombreCompleto</strong>
                                                                    @if (direccion.EsDireccionPrincipal)
                                                                    {
                                                                        <span class="badge ms-2" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">Principal</span>
                                                                    }
                                                                    <br>
                                                                    <small class="text-muted">
                                                                        @direccion.Direccion<br>
                                                                        @direccion.Ciudad, @direccion.Provincia - @direccion.CodigoPostal<br>
                                                                        Tel: @direccion.Telefono
                                                                        @if (!string.IsNullOrEmpty(direccion.Referencias))
                                                                        {
                                                                            <br>
                                                                            <em>@direccion.Referencias</em>
                                                                        }
                                                                    </small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </label>
                                            </div>
                                        }
                                    </div>

                                    <div class="text-center mb-3">
                                        <button type="button" class="btn btn-custom-outline" id="btn-nueva-direccion">
                                            <i class="fas fa-plus me-2"></i>Agregar Nueva Dirección
                                        </button>
                                    </div>
                                    @Html.HiddenFor(m => m.UsarNuevaDireccion)
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        No tienes direcciones guardadas. Agrega una nueva dirección para continuar.
                                    </div>
                                    @Html.HiddenFor(m => m.UsarNuevaDireccion, new { @value = "true" })
                                }

                                <div id="nueva-direccion-form" style="@(Model.DireccionesDisponibles.Any() ? "display: none;" : "")">
                                    <div class="card bg-light">
                                        <div class="card-header">
                                            <h6 class="mb-0">Nueva Dirección de Envío</h6>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                <div class="col-md-6 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.NombreCompleto, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.NombreCompleto, new { @class = "form-control", placeholder = "Nombre completo" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.NombreCompleto, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-6 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.Telefono, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.Telefono, new { @class = "form-control", placeholder = "Teléfono" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.Telefono, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.Direccion, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.Direccion, new { @class = "form-control", placeholder = "Calle y número" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.Direccion, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-4 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.Ciudad, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.Ciudad, new { @class = "form-control", placeholder = "Ciudad" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.Ciudad, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-4 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.Provincia, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.Provincia, new { @class = "form-control", placeholder = "Provincia" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.Provincia, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-4 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.CodigoPostal, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.CodigoPostal, new { @class = "form-control", placeholder = "CP" })
                                                    @Html.ValidationMessageFor(m => m.NuevaDireccion.CodigoPostal, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 mb-3">
                                                    @Html.LabelFor(m => m.NuevaDireccion.Referencias, new { @class = "form-label" })
                                                    @Html.TextBoxFor(m => m.NuevaDireccion.Referencias, new { @class = "form-control", placeholder = "Referencias (opcional)" })
                                                </div>
                                            </div>
                                            <div class="form-check">
                                                @Html.CheckBoxFor(m => m.NuevaDireccion.GuardarDireccion, new { @class = "form-check-input" })
                                                @Html.LabelFor(m => m.NuevaDireccion.GuardarDireccion, "Guardar para futuras compras", new { @class = "form-check-label" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @* 2. Método de Pago *@
                        <div class="checkout-step mb-4">
                            <h5 class="step-title">
                                <span class="step-number">2</span>
                                Método de Pago
                            </h5>

                            <div class="step-content">
                                @if (Model.MetodosPagoDisponibles != null && Model.MetodosPagoDisponibles.Any())
                                {
                                    <div class="row g-3">
                                        @foreach (var metodo in Model.MetodosPagoDisponibles)
                                        {
                                            <div class="col-md-6">
                                                <div class="metodo-pago-card">
                                                    <input type="radio" class="btn-check" name="MetodoPagoSeleccionado"
                                                           value="@metodo.IdMetodoPago" id="pago_@metodo.IdMetodoPago"
                                                           data-nombre="@metodo.Nombre.ToLower()">
                                                    <label class="btn btn-outline-primary w-100 text-start p-3" for="pago_@metodo.IdMetodoPago">
                                                        <i class="fas fa-@GetPaymentIcon(metodo.Nombre) fa-lg me-2"></i>
                                                        <strong>@metodo.Nombre</strong>
                                                        <p class="text-muted small mb-0 mt-1">@metodo.Descripcion</p>
                                                    </label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <span asp-validation-for="MetodoPagoSeleccionado" class="text-danger d-block mt-2"></span>

                                    @* Formulario de Tarjeta *@
                                    <div id="form-tarjeta" style="display: none;" class="mt-3">
                                        <div class="card bg-light">
                                            <div class="card-header">
                                                <h6 class="mb-0"><i class="fas fa-credit-card me-2"></i>Datos de la Tarjeta</h6>
                                            </div>
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-12 mb-3">
                                                        <label class="form-label">Número de Tarjeta *</label>
                                                        <input type="text" class="form-control" id="numero-tarjeta"
                                                               placeholder="1234 5678 9012 3456" maxlength="19">
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label class="form-label">Titular *</label>
                                                        <input type="text" class="form-control" id="titular-tarjeta"
                                                               placeholder="NOMBRE Y APELLIDO" style="text-transform: uppercase;">
                                                    </div>
                                                    <div class="col-md-3 mb-3">
                                                        <label class="form-label">Vencimiento *</label>
                                                        <input type="text" class="form-control" id="vencimiento-tarjeta"
                                                               placeholder="MM/AA" maxlength="5">
                                                    </div>
                                                    <div class="col-md-3 mb-3">
                                                        <label class="form-label">CVV *</label>
                                                        <input type="text" class="form-control" id="cvv-tarjeta"
                                                               placeholder="123" maxlength="4">
                                                    </div>
                                                </div>

                                                @* SECCIÓN DE CUOTAS  *@
                                                <div id="seccion-cuotas" style="display: none;">
                                                    <hr class="my-3">
                                                    <div class="row">
                                                        <div class="col-12">
                                                            <label class="form-label fw-bold">
                                                                <i class="fas fa-calendar-alt me-2" style="color: #667eea;"></i>
                                                                Cantidad de cuotas
                                                            </label>

                                                            @Html.DropDownListFor(m => m.CantidadCuotas,
                                                            new SelectList(new List<SelectListItem>()),
                                                                                                        "Seleccione cantidad de cuotas",
                                                                                                        new { @class = "form-select form-select-lg", id = "select-cuotas" })

                                                    <div class="alert alert-info mt-3 mb-0" id="info-cuota-seleccionada" style="display: none;">
                                                        <div class="row align-items-center">
                                                            <div class="col-md-6">
                                                                <div class="mb-2 mb-md-0">
                                                                    <i class="fas fa-info-circle me-2"></i>
                                                                    <strong id="cuotas-texto">Seleccione cuotas</strong>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6 text-md-end">
                                                                <div class="small text-muted">Valor por cuota</div>
                                                                <strong id="valor-cuota" style="color: #667eea; font-size: 1.3rem;">$0,00</strong>
                                                            </div>
                                                        </div>
                                                        <div class="mt-2 pt-2 border-top" id="info-total-financiado" style="display: none;">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span class="text-muted small">Total financiado:</span>
                                                                <strong id="total-financiado" class="text-muted">$0,00</strong>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @* Información de Transferencia *@
                            <div id="form-transferencia" style="display: none;" class="mt-3">
                                <div class="alert alert-info">
                                    <h6><i class="fas fa-university me-2"></i>Datos para Transferencia</h6>
                                    <p class="mb-1"><strong>CBU:</strong> 0170099220000037914652</p>
                                    <p class="mb-1"><strong>Alias:</strong> HARDWARE.STORE.EJEMPLO</p>
                                    <p class="mb-1"><strong>Titular:</strong> Hardware Store S.A.</p>
                                    <p class="mb-0"><strong>CUIT:</strong> 20-12345678-9</p>
                                    <hr>
                                    <small class="text-muted">
                                        <i class="fas fa-exclamation-circle me-1"></i>
                                        Enviar comprobante a: ventas@hardwarestore.com
                                    </small>
                                </div>
                            </div>
                                                        }
                                else
                                {
                                    <div class="alert alert-danger">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <strong>Error:</strong> No hay métodos de pago disponibles. Contacte al administrador.
                                    </div>
                                }
                            </div>
                        </div>

                        @* 3. Cupón de Descuento *@
                        <div class="checkout-step mb-4">
                            <h5 class="step-title">
                                <span class="step-number">3</span>
                                Cupón de Descuento (Opcional)
                            </h5>
                            <div class="step-content">
                                <div class="row align-items-end">
                                    <div class="col-md-8">
                                        @Html.TextBoxFor(m => m.CodigoCupon, new { @class = "form-control", placeholder = "Código de cupón", id = "codigo-cupon" })
                                    </div>
                                    <div class="col-md-4">
                                        <button type="button" class="btn btn-custom-outline w-100" id="btn-aplicar-cupon">
                                            <i class="fas fa-tag me-2"></i>Aplicar
                                        </button>
                                    </div>
                                </div>
                                <div id="mensaje-cupon" class="mt-2" style="display: none;"></div>
                            </div>
                        </div>

                        @* 4. Notas Especiales *@
                        <div class="checkout-step mb-4">
                            <h5 class="step-title">
                                <span class="step-number">4</span>
                                Notas Especiales (Opcional)
                            </h5>
                            <div class="step-content">
                                @Html.TextAreaFor(m => m.NotasEspeciales, new { @class = "form-control", @rows = "3", placeholder = "Instrucciones de entrega..." })
                            </div>
                        </div>

                        @* Términos y Condiciones *@
                        <div class="mb-4">
                            <div class="form-check">
                                @Html.CheckBoxFor(m => m.AceptaTerminos, new { @class = "form-check-input", @required = "required" })
                                <label class="form-check-label">
                                    Acepto los <a href="#" style="color: #667eea;">términos y condiciones</a> *
                                </label>
                                @Html.ValidationMessageFor(m => m.AceptaTerminos, "", new { @class = "text-danger d-block" })
                            </div>
                        </div>

                        @* Botón Finalizar *@
                        <div class="text-center">
                            <button type="submit" class="btn btn-custom btn-lg px-5" id="btn-finalizar-compra">
                                <i class="fas fa-lock me-2"></i>Finalizar Compra
                                <span class="total-final ms-2">$@Model.Total.ToString("N2")</span>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        @* Resumen del Pedido *@
        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top border-0" style="top: 20px;">
                <div class="card-header bg-light">
                    <h5 class="mb-0" style="color: #667eea;">
                        <i class="fas fa-receipt me-2"></i>Resumen del Pedido
                    </h5>
                </div>
                <div class="card-body">
                    <div class="productos-resumen mb-3">
                        @foreach (var item in Model.ItemsCarrito)
                        {
                            <div class="d-flex align-items-center mb-2 pb-2 border-bottom">
                                <img src="@(!string.IsNullOrEmpty(item.RutaImagen) ? item.RutaImagen : "/images/no-image.png")"
                                     alt="@item.NombreProducto" class="producto-img me-3">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">@item.NombreProducto</h6>
                                    <small class="text-muted">@item.NombreMarca</small>
                                    <div class="d-flex justify-content-between">
                                        <span>Cant: @item.Cantidad</span>
                                        <strong style="color: #667eea;">$@item.Subtotal.ToString("N2")</strong>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="totales">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal (@Model.TotalItems items):</span>
                            <span id="subtotal-valor">$@Model.Subtotal.ToString("N2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Envío:</span>
                            <span id="envio-valor">$@Model.CostoEnvio.ToString("N2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2 text-success" id="descuento-row" style="@(Model.DescuentoAplicado > 0 ? "" : "display: none;")">
                            <span>Descuento:</span>
                            <span id="descuento-valor">-$@Model.DescuentoAplicado.ToString("N2")</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between">
                            <strong>Total:</strong>
                            <strong class="fs-5" style="color: #667eea;" id="total-valor">$@Model.Total.ToString("N2")</strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetPaymentIcon(string metodoPago)
    {
        return metodoPago.ToLower() switch
        {
            var x when x.Contains("crédito") => "credit-card",
            var x when x.Contains("débito") => "credit-card",
            var x when x.Contains("transferencia") => "university",
            var x when x.Contains("mercadopago") || x.Contains("mercado pago") => "mobile-alt",
            _ => "credit-card"
        };
    }
}

<style>
    .checkout-step {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 20px;
        background-color: #fafafa;
    }

    .step-title {
        color: #667eea;
        border-bottom: 2px solid #dee2e6;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .step-number {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 50%;
        padding: 5px 12px;
        margin-right: 10px;
        font-weight: bold;
        font-size: 1.1rem;
    }

    .direccion-option {
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .direccion-option:hover {
            border-color: #667eea;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
        }

    .direccion-radio:checked + label .direccion-option {
        border-color: #667eea;
        background-color: #f8f9ff;
    }

    .metodo-pago-card .btn {
        height: 100%;
        transition: all 0.3s ease;
        border-width: 2px;
        min-height: 90px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
    }

    .metodo-pago-card .btn-check:checked + .btn {
        background-color: #667eea;
        color: white;
        border-color: #667eea;
    }

    .metodo-pago-card .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .metodo-pago-card .btn-check:checked + .btn .text-muted {
        color: rgba(255, 255, 255, 0.8) !important;
    }

    .producto-img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 4px;
    }

    .campo-requerido {
        border-color: #dc3545 !important;
        animation: shake 0.3s;
    }

    .btn-custom {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        transition: all 0.3s ease;
    }

        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
            color: white;
        }

    .btn-custom-outline {
        border: 2px solid #667eea;
        color: #667eea;
        background: white;
        transition: all 0.3s ease;
    }

        .btn-custom-outline:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: #667eea;
        }

    /* Estilos para el select de cuotas */
    #select-cuotas {
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 12px 16px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background-color: white;
    }

        #select-cuotas:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            outline: none;
        }

        #select-cuotas option {
            padding: 10px;
            font-size: 0.95rem;
        }

    /* Animación para el alert de cuotas */
    #info-cuota-seleccionada {
        border-left: 4px solid #667eea;
        animation: slideInRight 0.3s ease-out;
    }

    /* Estilo para el valor de cuota destacado */
    #valor-cuota {
        text-shadow: 0 2px 4px rgba(102, 126, 234, 0.1);
    }

    /* Responsive para móviles */
    @@media (max-width: 768px) {
        #select-cuotas {
            font-size: 0.9rem;
        }

        #valor-cuota {
            font-size: 1.1rem !important;
        }
    }

    @@keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log('✅ Checkout script iniciado');
            console.log('Métodos de pago disponibles:', @Model.MetodosPagoDisponibles.Count);

            // Planes de cuotas 
            var planesCuotas = [
                { nro: 1, interes: 0.00, texto: 'Pago en 1 cuota' },
                { nro: 3, interes: 0.00, texto: '3 cuotas sin interés' },
                { nro: 6, interes: 0.135, texto: '6 cuotas' },
                { nro: 9, interes: 0.285, texto: '9 cuotas' },
                { nro: 12, interes: 0.462, texto: '12 cuotas' },
                { nro: 18, interes: 0.933, texto: '18 cuotas' },
                { nro: 24, interes: 1.571, texto: '24 cuotas' }
            ];

            
            function formatearPrecio(valor) {
                return valor.toLocaleString('es-AR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

            // Función para poblar el select de cuotas
            function poblarSelectCuotas() {
                var subtotalTexto = $('#subtotal-valor').text().replace('$', '').replace(/\./g, '').replace(',', '.');
                var subtotal = parseFloat(subtotalTexto);

                console.log('Subtotal texto:', subtotalTexto);
                console.log('Subtotal parseado:', subtotal);

                var $select = $('#select-cuotas');
                $select.empty();
                $select.append('<option value="">Seleccione cantidad de cuotas</option>');

                planesCuotas.forEach(function(plan) {
                    var total = subtotal * (1 + plan.interes);
                    var valorCuota = total / plan.nro;
                    var sinInteres = plan.interes === 0;

                    var textoOpcion = plan.nro + ' cuota' + (plan.nro > 1 ? 's' : '') + ' de $' + formatearPrecio(valorCuota);
                    if (sinInteres && plan.nro > 1) {
                        textoOpcion += ' (Sin interés)';
                    } else if (plan.interes > 0) {
                        textoOpcion += ' (Total: $' + formatearPrecio(total) + ')';
                    }

                    $select.append($('<option>', {
                        value: plan.nro,
                        text: textoOpcion,
                        'data-valor-cuota': valorCuota.toFixed(2),
                        'data-total': total.toFixed(2),
                        'data-interes': plan.interes,
                        'data-texto': plan.texto
                    }));
                });

                // Seleccionar 1 cuota por defecto
                $select.val('1');
                actualizarInfoCuota(1);
            }

            // Actualizar información de cuota seleccionada
            function actualizarInfoCuota(cuotas) {
                var $option = $('#select-cuotas option[value="' + cuotas + '"]');

                if ($option.length === 0) {
                    $('#info-cuota-seleccionada').hide();
                    return;
                }

                var valorCuota = parseFloat($option.data('valor-cuota'));
                var total = parseFloat($option.data('total'));
                var interes = parseFloat($option.data('interes'));
                var texto = $option.data('texto');

                $('#cuotas-texto').text(texto);
                $('#valor-cuota').text('$' + formatearPrecio(valorCuota));

                // Mostrar total financiado solo si hay interés
                if (interes > 0) {
                    $('#total-financiado').text('$' + formatearPrecio(total));
                    $('#info-total-financiado').show();
                } else {
                    $('#info-total-financiado').hide();
                }

                $('#info-cuota-seleccionada').slideDown(300);
            }

            // Evento cambio en el select de cuotas
            $('#select-cuotas').on('change', function() {
                var cuotas = $(this).val();
                if (cuotas) {
                    actualizarInfoCuota(parseInt(cuotas));
                } else {
                    $('#info-cuota-seleccionada').slideUp(300);
                }
            });

            // Función para mostrar formulario de pago
            function mostrarFormularioPago(idMetodo) {
                console.log('🔍 Mostrando formulario para método:', idMetodo);
                $('#form-tarjeta, #form-transferencia, #seccion-cuotas').hide();

                var $radio = $('input[name="MetodoPagoSeleccionado"][value="' + idMetodo + '"]');
                var nombre = $radio.data('nombre');

                console.log('Nombre método:', nombre);

                if (nombre && (nombre.includes('tarjeta') || nombre.includes('crédito') || nombre.includes('débito'))) {
                    console.log('✅ Mostrando formulario de tarjeta');
                    $('#form-tarjeta').slideDown(300);
                    if (nombre.includes('crédito')) {
                        console.log('✅ Mostrando sección de cuotas');
                        $('#seccion-cuotas').show();
                        poblarSelectCuotas();
                    }
                } else if (nombre && nombre.includes('transferencia')) {
                    console.log('✅ Mostrando formulario de transferencia');
                    $('#form-transferencia').slideDown(300);
                }
            }

            // Restaurar selección si viene de error
            var metodoPagoSeleccionado = '@Model.MetodoPagoSeleccionado';
            if (metodoPagoSeleccionado && metodoPagoSeleccionado !== '0') {
                console.log('Restaurando método de pago:', metodoPagoSeleccionado);
                $('#pago_' + metodoPagoSeleccionado).prop('checked', true);
                mostrarFormularioPago(metodoPagoSeleccionado);
            }

            // Restaurar selección de cuotas si viene de error
            var cuotasSeleccionadas = '@Model.CantidadCuotas';
            if (cuotasSeleccionadas && cuotasSeleccionadas !== '0' && $('#seccion-cuotas').is(':visible')) {
                setTimeout(function() {
                    $('#select-cuotas').val(cuotasSeleccionadas);
                    if (cuotasSeleccionadas) {
                        actualizarInfoCuota(parseInt(cuotasSeleccionadas));
                    }
                }, 300);
            }

            // Toggle nueva dirección
            $('#btn-nueva-direccion').on('click', function(e) {
                e.preventDefault();
                var $form = $('#nueva-direccion-form');
                var visible = $form.is(':visible');

                if (visible) {
                    $form.slideUp(300);
                    $('input[name="UsarNuevaDireccion"]').val('false');
                    $(this).html('<i class="fas fa-plus me-2"></i>Agregar Nueva Dirección');
                } else {
                    $form.slideDown(300);
                    $('input[name="UsarNuevaDireccion"]').val('true');
                    $('.direccion-radio').prop('checked', false);
                    $(this).html('<i class="fas fa-minus me-2"></i>Cancelar');
                }
            });

            // Cambio de método de pago
            $('input[name="MetodoPagoSeleccionado"]').on('change', function() {
                if ($(this).is(':checked')) {
                    console.log('📌 Método seleccionado:', $(this).val());
                    mostrarFormularioPago($(this).val());
                }
            });

            // Seleccionar dirección existente
            $('.direccion-radio').on('change', function() {
                if ($(this).is(':checked')) {
                    $('#nueva-direccion-form').slideUp(300);
                    $('input[name="UsarNuevaDireccion"]').val('false');
                    $('#btn-nueva-direccion').html('<i class="fas fa-plus me-2"></i>Agregar Nueva Dirección');
                }
            });

            // Validación del formulario
            $('form.checkout-form').on('submit', function(e) {
                var metodoPago = $('input[name="MetodoPagoSeleccionado"]:checked').val();
                var direccion = $('input[name="DireccionEnvioSeleccionada"]:checked').val();
                var usaNuevaInput = $('input[name="UsarNuevaDireccion"]');
                var usaNueva = usaNuevaInput.val() === 'true' || usaNuevaInput.val() === 'True';
                var terminos = $('input[name="AceptaTerminos"]').is(':checked');

                console.log('=== VALIDACIÓN SUBMIT ===');
                console.log('Método Pago:', metodoPago);
                console.log('Dirección:', direccion);
                console.log('Usa Nueva:', usaNueva);
                console.log('Términos:', terminos);

                if (!metodoPago || metodoPago === '0') {
                    alert('Por favor seleccione un método de pago');
                    e.preventDefault();
                    return false;
                }

                if (!direccion && !usaNueva) {
                    alert('Por favor seleccione una dirección de envío o ingrese una nueva');
                    e.preventDefault();
                    return false;
                }

                if (!terminos) {
                    alert('Debe aceptar los términos y condiciones');
                    e.preventDefault();
                    return false;
                }

                // Validar tarjeta si es necesario
                var $radio = $('input[name="MetodoPagoSeleccionado"]:checked');
                var nombre = $radio.data('nombre');

                if ((nombre.includes('tarjeta') || nombre.includes('crédito') || nombre.includes('débito')) && $('#form-tarjeta').is(':visible')) {
                    if (!validarTarjeta()) {
                        e.preventDefault();
                        return false;
                    }

                    // Validar cuotas si es tarjeta de crédito
                    if (nombre.includes('crédito') && $('#seccion-cuotas').is(':visible')) {
                        var cuotasSelec = $('#select-cuotas').val();
                        if (!cuotasSelec) {
                            alert('Por favor seleccione la cantidad de cuotas');
                            $('#select-cuotas').focus();
                            e.preventDefault();
                            return false;
                        }
                    }
                }

                console.log('✅ Validaciones OK - Enviando formulario');
                return true;
            });

            // Validar datos de tarjeta
            function validarTarjeta() {
                var numero = $('#numero-tarjeta').val().trim();
                var titular = $('#titular-tarjeta').val().trim();
                var venc = $('#vencimiento-tarjeta').val().trim();
                var cvv = $('#cvv-tarjeta').val().trim();

                if (!numero || !titular || !venc || !cvv) {
                    alert('Complete todos los datos de la tarjeta');
                    if (!numero) $('#numero-tarjeta').addClass('campo-requerido').focus();
                    else if (!titular) $('#titular-tarjeta').addClass('campo-requerido').focus();
                    else if (!venc) $('#vencimiento-tarjeta').addClass('campo-requerido').focus();
                    else if (!cvv) $('#cvv-tarjeta').addClass('campo-requerido').focus();
                    return false;
                }

                return true;
            }

            // Formateo de número de tarjeta
            $('#numero-tarjeta').on('input', function() {
                $(this).removeClass('campo-requerido');
                var value = $(this).val().replace(/\s/g, '').replace(/\D/g, '');
                var formatted = value.match(/.{1,4}/g);
                $(this).val(formatted ? formatted.join(' ') : value);
            });

            // Formateo de vencimiento
            $('#vencimiento-tarjeta').on('input', function() {
                $(this).removeClass('campo-requerido');
                var value = $(this).val().replace(/\D/g, '');
                if (value.length >= 2) {
                    value = value.substring(0, 2) + '/' + value.substring(2, 4);
                }
                $(this).val(value);
            });

            // Solo números en CVV
            $('#cvv-tarjeta').on('input', function() {
                $(this).removeClass('campo-requerido');
                $(this).val($(this).val().replace(/\D/g, ''));
            });

            // Limpiar clase de error al escribir
            $('#titular-tarjeta').on('input', function() {
                $(this).removeClass('campo-requerido');
            });

            // Aplicar cupón (AJAX)
            $('#btn-aplicar-cupon').on('click', function() {
                var codigo = $('#codigo-cupon').val().trim();

                if (!codigo) {
                    mostrarMensajeCupon('Ingrese un código de cupón', 'warning');
                    return;
                }

                
                mostrarMensajeCupon('Función de cupones pendiente de implementar', 'info');
            });

            function mostrarMensajeCupon(mensaje, tipo) {
                var $mensaje = $('#mensaje-cupon');
                var claseAlerta = 'alert-' + tipo;

                $mensaje.removeClass('alert-success alert-danger alert-warning alert-info')
                        .addClass('alert ' + claseAlerta)
                        .html('<i class="fas fa-info-circle me-2"></i>' + mensaje)
                        .slideDown(300);

                setTimeout(function() {
                    $mensaje.slideUp(300);
                }, 5000);
            }
        });
    </script>
}