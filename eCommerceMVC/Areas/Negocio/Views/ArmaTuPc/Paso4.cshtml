@using eCommerce.Entities.ViewModels
@{
    ViewData["Title"] = "Arma tu PC - RAM";
    Layout = "~/Areas/Negocio/Views/Shared/_Layout.cshtml";
}

@model ArmaPcViewModel

@Html.Partial("Partials/_EstilosComunes")

<div class="arma-pc-page">
    <div class="container">
        <div class="row mb-4">
            <div class="col-12">
                <a href="javascript:history.back()" class="text-decoration-none text-muted mb-3 d-inline-block">
                    <i class="fas fa-arrow-left me-2"></i>Volver Atrás
                </a>
                <h1 class="display-5 fw-bold mb-2">@Model.Titulo</h1>
                <p class="text-muted mb-3">@Model.Descripcion</p>

                <div class="progress-custom mb-2">
                    <div class="progress-bar-custom" style="width: 50%;"></div>
                </div>
                <small class="text-muted">Paso 4 de 8</small>
            </div>
        </div>

        <div class="row g-4">
            <div class="col-lg-8">
                <div class="alert alert-info mb-4 d-flex justify-content-between align-items-center">
                    <span>
                        <i class="fas fa-info-circle me-2"></i>
                        Selecciona hasta 4 módulos de RAM (puedes elegir el mismo producto varias veces)
                    </span>
                    <span class="badge bg-primary fs-6" id="ramCounter">0/4</span>
                </div>

                <!-- Filtro de Ordenamiento -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-muted small">
                        <span id="productCount"></span> productos disponibles
                    </span>
                    <div class="d-flex align-items-center gap-2">
                        <label class="text-muted small mb-0">Ordenar por:</label>
                        <select class="form-select form-select-sm" id="sortFilter" style="width: auto; min-width: 180px;">
                            <option value="default">Relevancia</option>
                            <option value="price-asc">Precio: Menor a Mayor</option>
                            <option value="price-desc">Precio: Mayor a Menor</option>
                            <option value="name-asc">Nombre: A-Z</option>
                            <option value="name-desc">Nombre: Z-A</option>
                        </select>
                    </div>
                </div>

                <form method="post" action="@Url.Action("SeleccionarRam")" id="formRam">
                    <input type="hidden" name="idProcesador" value="@Model.IdProcesadorSeleccionado">
                    <input type="hidden" name="idMotherboard" value="@Model.IdMotherboardSeleccionado">
                    <input type="hidden" name="marca" value="@Model.MarcaSeleccionada">

                    <div class="row g-3">
                        @foreach (var ram in Model.RamsDisponibles)
                        {
                            <div class="col-md-6">
                                <div class="card h-100 shadow-sm ram-card" data-id="@ram.IdProducto">
                                    <div class="card-body p-3">
                                        <div class="text-center mb-3 position-relative">
                                            @if (!string.IsNullOrEmpty(ram.RutaImagen))
                                            {
                                                <img src="@ram.RutaImagen" alt="@ram.Nombre" class="img-fluid" style="max-height: 150px; object-fit: contain;">
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center justify-content-center" style="height: 150px;">
                                                    <i class="fas fa-memory text-muted" style="font-size: 3rem;"></i>
                                                </div>
                                            }
                                            <span class="badge bg-success position-absolute top-0 end-0 quantity-badge"
                                                  data-id="@ram.IdProducto"
                                                  style="display: none; font-size: 1rem; padding: 0.5rem 0.75rem;">
                                                x<span class="qty-number">0</span>
                                            </span>
                                        </div>

                                        <h6 class="fw-bold mb-2" style="min-height: 40px; font-size: 0.9rem;">@ram.Nombre</h6>

                                        @if (ram.Especificaciones.Any())
                                        {
                                            <div class="mb-3">
                                                @foreach (var spec in ram.Especificaciones.Take(2))
                                                {
                                                    <small class="text-muted d-block" style="font-size: 0.75rem;">@spec.Valor</small>
                                                }
                                            </div>
                                        }

                                        <div class="mb-3">
                                            <h5 class="mb-0 fw-bold" style="color: #667eea;">$@ram.Precio.ToString("N0")</h5>
                                            @if (ram.EnStock)
                                            {
                                                <small class="text-success"><i class="fas fa-check-circle me-1"></i>Compatible</small>
                                            }
                                        </div>

                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button" class="btn btn-outline-secondary btn-sm qty-minus flex-shrink-0" data-id="@ram.IdProducto" style="width: 40px; height: 40px;">
                                                −
                                            </button>
                                            <div class="flex-grow-1 text-center fw-bold fs-5 qty-display" data-id="@ram.IdProducto">0</div>
                                            <button type="button" class="btn btn-outline-secondary btn-sm qty-plus flex-shrink-0" data-id="@ram.IdProducto" style="width: 40px; height: 40px;">
                                                +
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="d-lg-none mt-4">
                        <button type="submit" class="btn btn-gradient btn-lg w-100 fw-bold" id="btnSiguienteMobile" disabled>
                            Siguiente Paso <i class="fas fa-arrow-right ms-2"></i>
                        </button>
                    </div>
                </form>
            </div>

            <div class="col-lg-4">
                @Html.Partial("Partials/_ComponentesSidebar", Model)

                <div class="mt-3 d-none d-lg-block">
                    <button type="submit" form="formRam" class="btn btn-gradient btn-lg w-100 fw-bold" id="btnSiguiente" disabled>
                        Siguiente Paso <i class="fas fa-arrow-right ms-2"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .ram-card {
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .ram-card.selected {
            border: 2px solid #667eea !important;
            background-color: rgba(102, 126, 234, 0.05);
        }

    .quantity-badge {
        border-radius: 50px;
    }

    .qty-display {
        color: #667eea;
        user-select: none;
    }

    .btn.qty-minus:disabled,
    .btn.qty-plus:disabled {
        opacity: 0.4;
        cursor: not-allowed;
    }

    .qty-minus, .qty-plus {
        font-size: 1.5rem;
        font-weight: 300;
        line-height: 1;
    }
</style>

<script>
    const ramQuantities = {};
    let totalRamSelected = 0;
    const MAX_RAM = 4;

    function updateRamCounter() {
        document.getElementById('ramCounter').textContent = `${totalRamSelected}/${MAX_RAM}`;

        const btnSiguiente = document.getElementById('btnSiguiente');
        const btnMobile = document.getElementById('btnSiguienteMobile');

        if (totalRamSelected > 0) {
            btnSiguiente.disabled = false;
            if (btnMobile) btnMobile.disabled = false;
        } else {
            btnSiguiente.disabled = true;
            if (btnMobile) btnMobile.disabled = true;
        }

        // Actualizar estado de botones plus
        document.querySelectorAll('.qty-plus').forEach(btn => {
            const id = btn.dataset.id;
            const currentQty = ramQuantities[id] || 0;
            btn.disabled = totalRamSelected >= MAX_RAM || currentQty >= MAX_RAM;
        });
    }

    function updateCardDisplay(id) {
        const quantity = ramQuantities[id] || 0;
        const card = document.querySelector(`.ram-card[data-id="${id}"]`);
        const display = document.querySelector(`.qty-display[data-id="${id}"]`);
        const badge = document.querySelector(`.quantity-badge[data-id="${id}"]`);
        const minusBtn = document.querySelector(`.qty-minus[data-id="${id}"]`);

        // Actualizar display
        display.textContent = quantity;

        // Actualizar badge
        if (quantity > 0) {
            badge.style.display = 'block';
            badge.querySelector('.qty-number').textContent = quantity;
            card.classList.add('selected');
        } else {
            badge.style.display = 'none';
            card.classList.remove('selected');
        }

        // Actualizar botón minus
        minusBtn.disabled = quantity === 0;
    }

    function syncHiddenInputs() {
        // Remover inputs anteriores
        document.querySelectorAll('input[name="idsRam"]').forEach(input => input.remove());

        // Crear nuevos inputs según las cantidades
        Object.keys(ramQuantities).forEach(id => {
            const quantity = ramQuantities[id];
            for (let i = 0; i < quantity; i++) {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'idsRam';
                hiddenInput.value = id;
                document.getElementById('formRam').appendChild(hiddenInput);
            }
        });
    }

    // Inicializar cantidades
    document.querySelectorAll('.ram-card').forEach(card => {
        const id = card.dataset.id;
        ramQuantities[id] = 0;
        updateCardDisplay(id);
    });

    // Botones menos
    document.querySelectorAll('.qty-minus').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const id = this.dataset.id;

            if (ramQuantities[id] > 0) {
                ramQuantities[id]--;
                totalRamSelected--;
                updateCardDisplay(id);
                updateRamCounter();
                syncHiddenInputs();
            }
        });
    });

    // Botones más
    document.querySelectorAll('.qty-plus').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const id = this.dataset.id;

            if (totalRamSelected < MAX_RAM && ramQuantities[id] < MAX_RAM) {
                ramQuantities[id]++;
                totalRamSelected++;
                updateCardDisplay(id);
                updateRamCounter();
                syncHiddenInputs();
            }
        });
    });

    // Validación al enviar
    document.getElementById('formRam').addEventListener('submit', function(e) {
        if (totalRamSelected === 0) {
            e.preventDefault();
            alert('Debes seleccionar al menos 1 módulo de RAM');
        }
    });

    // Inicializar estado de botones
    updateRamCounter();


        document.addEventListener('DOMContentLoaded', function() {
        const sortFilter = document.getElementById('sortFilter');
        const productGrid = document.querySelector('.row.g-3');
        const productCards = Array.from(productGrid.children);

        // Mostrar contador de productos
        const productCount = document.getElementById('productCount');
        if (productCount) {
            productCount.textContent = productCards.length;
        }

        // Función para obtener datos del producto
        function getProductData(card) {
            const priceText = card.querySelector('h5')?.textContent || '0';
            const price = parseInt(priceText.replace(/\D/g, '')) || 0;
            const name = card.querySelector('h6')?.textContent?.trim() || '';
            return { element: card, price, name };
        }

        // Guardar datos originales
        const products = productCards.map(getProductData);

        // Evento de cambio en el filtro
        sortFilter.addEventListener('change', function() {
            const sortValue = this.value;
            let sortedProducts = [...products];

            switch(sortValue) {
                case 'price-asc':
                    sortedProducts.sort((a, b) => a.price - b.price);
                    break;
                case 'price-desc':
                    sortedProducts.sort((a, b) => b.price - a.price);
                    break;
                case 'name-asc':
                    sortedProducts.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name-desc':
                    sortedProducts.sort((a, b) => b.name.localeCompare(a.name));
                    break;
                case 'default':
                    sortedProducts = [...products]; // Orden original
                    break;
            }

            // Reordenar elementos en el DOM
            productGrid.innerHTML = '';
            sortedProducts.forEach(product => {
                productGrid.appendChild(product.element);
            });
        });
    });
</script>